{"ast":null,"code":"import _slicedToArray from \"/home/gisele/Documentos/curso/curso_rocketseat/primeiroprojetoreact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gisele/Documentos/curso/curso_rocketseat/primeiroprojetoreact/src/pages/Repository/index.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport api from '../../services/api';\nimport Container from '../../components/Container';\nimport { Loading, Owner, IssueList } from './styles';\n/* Componente pode receber propriedades props ao ser chamado, neste caso na rota\n recebemos uma propriedade chamada match, e dentro dela tem uma outra propriedade que se\n chama params e la dentro estará nossos parametros */\n\n/* Realizamos o decode da propriedade */\n\nclass Repository extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      repository: {},\n      // Como é um unico repositorio começo ele como um obj e não array\n      issues: [],\n      // e as issues como são varias inicio como um array\n      loading: true\n    };\n  }\n\n  /* Quando o componente aparece em tela */\n  async componentDidMount() {\n    /* Dado que vem através da minha URL */\n    const match = this.props.match;\n    const repoName = decodeURIComponent(match.params.repository);\n    /* Temos que efetuar duas chamadas a API uma com as informações do repositório solicitado\n    e outra com as issues que são os comentários de usuários do github, poderiamos efetuar\n    essas chamadas de forma isolada:\n    const response = await api.get(...)\n    const issues = await api.get(...)\n    Porém a requisição das issues não tem necessidade de aguardar a finalização da primeira\n    requisição, então não faz sentido fazer dessa forma... então vamos fazer as duas chamadas\n    serem feitas ao mesmo tempo, e passamos um array com todas as promisses ou seja com\n    todas as chamadas que queremos fazer a api as duas serão executadas juntas.\n    Agora só ira passar para a proxima linha de quando as duas chamadas finalizarem.\n     Pegando o valor de cada retorno: os valores são retornadas em um array a primeira\n    posição ira vim o resultado da primeira chamada a api e a segunda posição a segunda\n    chamada da api, então podemos fazer uma desestruturação onde o primeiro onde o resultado\n    da primeira chamado eu coloco dentro de repository e a segunda dentro de issues\n     Na chamada a api das issues passamos algumas query params que nada mais é que filtros\n    para busca, neste caso vamos retornar apenas as issues que os estados delas são open\n    ou seja issues em aberto que não foram resolvidas, e vou retornar apenas 5 itens\n    */\n\n    const _ref = await Promise.all([api.get(`/repos/${repoName}`), api.get(`/repos/${repoName}/issues`, {\n      params: {\n        state: 'open',\n        per_page: 10\n      }\n    })]),\n          _ref2 = _slicedToArray(_ref, 2),\n          repository = _ref2[0],\n          issues = _ref2[1];\n    /* .data é onde os dados vem no axios */\n\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          repository = _this$state.repository,\n          issues = _this$state.issues,\n          loading = _this$state.loading;\n\n    if (loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Carregando\");\n    }\n\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Owner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Voltar aos reposit\\xF3rios\"), React.createElement(\"img\", {\n      src: repository.owner.avatar_url,\n      alt: repository.owner.login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \" \", repository.name, \" \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \" \", repository.description, \" \")), React.createElement(IssueList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, issues.map(issue => // Transforma em string\n    React.createElement(\"li\", {\n      key: String(issue.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: issue.user.avatar_url,\n      alt: issue.user.login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: issue.html_url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \" \", issue.title, \" \"), issue.labels.map(label => React.createElement(\"span\", {\n      key: String(label.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \" \", label.name, \" \"))), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, issue.user.login))))));\n  }\n\n}\n\nRepository.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      repository: PropTypes.string\n    })\n  }).isRequired\n};\nexport default Repository;","map":{"version":3,"sources":["/home/gisele/Documentos/curso/curso_rocketseat/primeiroprojetoreact/src/pages/Repository/index.js"],"names":["React","Component","Link","PropTypes","api","Container","Loading","Owner","IssueList","Repository","state","repository","issues","loading","componentDidMount","match","props","repoName","decodeURIComponent","params","Promise","all","get","per_page","setState","data","render","owner","avatar_url","login","name","description","map","issue","String","id","user","html_url","title","labels","label","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport api from '../../services/api';\n\nimport Container from '../../components/Container';\nimport { Loading, Owner, IssueList } from './styles';\n\n/* Componente pode receber propriedades props ao ser chamado, neste caso na rota\n recebemos uma propriedade chamada match, e dentro dela tem uma outra propriedade que se\n chama params e la dentro estará nossos parametros */\n\n/* Realizamos o decode da propriedade */\nclass Repository extends Component {\n  /* O tipo da propriedade match é um objeto porque dentro dela tem outra propriedade que\n  é params, para definir uma propriedade do tipo objeto eu utilizo shape e digo que ela\n  é obrigatória, e dentro deste objeto eu tenho uma propriedade chamada params ela tbm é\n  um objeto porque dentro dela tem a propriedade repository, e dentro da repository como\n  não tenho mais propriedade eu digo que ela é uma string */\n  static propTypes = {\n    match: PropTypes.shape({\n      params: PropTypes.shape({\n        repository: PropTypes.string,\n      }),\n    }).isRequired,\n  };\n\n  state = {\n    repository: {}, // Como é um unico repositorio começo ele como um obj e não array\n    issues: [], // e as issues como são varias inicio como um array\n    loading: true,\n  };\n\n  /* Quando o componente aparece em tela */\n  async componentDidMount() {\n    /* Dado que vem através da minha URL */\n    const { match } = this.props;\n    const repoName = decodeURIComponent(match.params.repository);\n\n    /* Temos que efetuar duas chamadas a API uma com as informações do repositório solicitado\n    e outra com as issues que são os comentários de usuários do github, poderiamos efetuar\n    essas chamadas de forma isolada:\n    const response = await api.get(...)\n    const issues = await api.get(...)\n    Porém a requisição das issues não tem necessidade de aguardar a finalização da primeira\n    requisição, então não faz sentido fazer dessa forma... então vamos fazer as duas chamadas\n    serem feitas ao mesmo tempo, e passamos um array com todas as promisses ou seja com\n    todas as chamadas que queremos fazer a api as duas serão executadas juntas.\n    Agora só ira passar para a proxima linha de quando as duas chamadas finalizarem.\n\n    Pegando o valor de cada retorno: os valores são retornadas em um array a primeira\n    posição ira vim o resultado da primeira chamada a api e a segunda posição a segunda\n    chamada da api, então podemos fazer uma desestruturação onde o primeiro onde o resultado\n    da primeira chamado eu coloco dentro de repository e a segunda dentro de issues\n\n    Na chamada a api das issues passamos algumas query params que nada mais é que filtros\n    para busca, neste caso vamos retornar apenas as issues que os estados delas são open\n    ou seja issues em aberto que não foram resolvidas, e vou retornar apenas 5 itens\n    */\n\n    const [repository, issues] = await Promise.all([\n      api.get(`/repos/${repoName}`),\n      api.get(`/repos/${repoName}/issues`, {\n        params: {\n          state: 'open',\n          per_page: 10,\n        },\n      }),\n    ]);\n\n    /* .data é onde os dados vem no axios */\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false,\n    });\n  }\n\n  render() {\n    const { repository, issues, loading } = this.state;\n\n    if (loading) {\n      return <Loading>Carregando</Loading>;\n    }\n    return (\n      <Container>\n        <Owner>\n          <Link to=\"/\">Voltar aos repositórios</Link>\n          <img src={repository.owner.avatar_url} alt={repository.owner.login} />\n          <h1> {repository.name} </h1>\n          <p> {repository.description} </p>\n        </Owner>\n\n        <IssueList>\n          {issues.map(issue => (\n            // Transforma em string\n            <li key={String(issue.id)}>\n              <img src={issue.user.avatar_url} alt={issue.user.login} />\n              <div>\n                <strong>\n                  {/* Não vamos usar o link do react-router-dom porque não é nenhum\n                  link interno, queremos redirecionar o usuário para a pagina html daquela\n                  issue */}\n                  <a href={issue.html_url}> {issue.title} </a>\n\n                  {/* Labels: */}\n                  {issue.labels.map(label => (\n                    <span key={String(label.id)}> {label.name} </span>\n                  ))}\n                </strong>\n                <p>{issue.user.login}</p>\n              </div>\n            </li>\n          ))}\n        </IssueList>\n      </Container>\n    );\n  }\n}\n\nexport default Repository;\n"]},"metadata":{},"sourceType":"module"}