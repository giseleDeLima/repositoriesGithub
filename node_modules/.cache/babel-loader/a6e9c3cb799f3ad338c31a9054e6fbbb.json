{"ast":null,"code":"var _jsxFileName = \"/home/gisele/Documentos/curso/curso_rocketseat/primeiroprojetoreact/src/pages/Main/index.js\";\nimport React, { Component } from 'react';\n/* react-icons/nome do pacote de icones que queremos utilizar\n{ nome do icone -ctrl + espaço } */\n\nimport { FaGithubAlt, FaPlus, FaSpinner } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\nimport api from '../../services/api';\nimport Container from '../../components/Container';\nimport { Form, SubmitButton, List } from './styles';\n\nclass Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      newRepo: '',\n      repositories: [],\n      loading: false,\n      error: null\n    };\n\n    this.handleInputChange = e => {\n      this.setState({\n        newRepo: e.target.value,\n        error: null\n      });\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      this.setState({\n        loading: true,\n        error: false\n      });\n      const _this$state = this.state,\n            newRepo = _this$state.newRepo,\n            repositories = _this$state.repositories;\n\n      try {\n        if (newRepo === '') {\n          throw new Error('Você precisa indicar um repositório');\n        }\n\n        const hasRepo = repositories.find(repo => repo.name === newRepo);\n\n        if (hasRepo) {\n          throw new Error('Repositório duplicado');\n        } // Fazer chamadas a api utilizando a bibloteca axios como ela vai demorar um pouco\n        // utilizamos a async await, metodo get para buscar uma informação\n\n\n        const response = await api.get(`/repos/${newRepo}`); // Não vamos utilizar todas as informações que vem da api do github, então\n        // fazemos a desestruturação para pegar apenas os dados necessários\n\n        const data = {\n          name: response.data.full_name\n        }; // Agora pegamos esta informação que veio da api e colocamos dentro do array\n        // repositories, como temos que montar novamente o array pegamos todas as informações\n        // que já tem dentro desse array com ...repositories, e acrescentamos o registro em data\n\n        this.setState({\n          repositories: [...repositories, data],\n          newRepo: ''\n        });\n      } catch (error) {\n        this.setState({\n          error: true\n        });\n      } finally {\n        this.setState({\n          loading: false\n        });\n      }\n    };\n  }\n\n  // Carrega os dados do localStorage\n  componentDidMount() {\n    const repositories = localStorage.getItem('repositories');\n\n    if (repositories) {\n      /* Convertemos novamente a estrutura que estava armazenada em JSON para um\n      valor em objeto do javascript  */\n      this.setState({\n        repositories: JSON.parse(repositories)\n      });\n    }\n  } // Salvar os dados no localStorage\n\n  /* Temos acesso as props e state desse componente, como não temos nenhuma\n  propriedade no componente colocamos _ , e comparamos se o estado de repositórios\n  mudou do meu estado atual de repositórios */\n\n\n  componentDidUpdate(_, prevState) {\n    const repositories = this.state.repositories;\n\n    if (prevState.repositories !== repositories) {\n      /* localStorage não aceita array apenas string */\n      localStorage.setItem('repositories', JSON.stringify(repositories));\n    }\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          newRepo = _this$state2.newRepo,\n          repositories = _this$state2.repositories,\n          loading = _this$state2.loading,\n          error = _this$state2.error;\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(FaGithubAlt, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), \"Reposit\\xF3rios\"), React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      error: error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Adicionar reposit\\xF3rios\",\n      value: newRepo,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(SubmitButton, {\n      loading: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, loading ? React.createElement(FaSpinner, {\n      color: \"#FFF\",\n      size: 14,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }) : React.createElement(FaPlus, {\n      color: \"#FFF\",\n      size: 14,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }))), React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, repositories.map(repository => React.createElement(\"li\", {\n      key: repository.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \" \", repository.name, \" \"), React.createElement(Link, {\n      to: `/repository/${encodeURIComponent(repository.name)}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Detalhes\")))));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/home/gisele/Documentos/curso/curso_rocketseat/primeiroprojetoreact/src/pages/Main/index.js"],"names":["React","Component","FaGithubAlt","FaPlus","FaSpinner","Link","api","Container","Form","SubmitButton","List","Main","state","newRepo","repositories","loading","error","handleInputChange","e","setState","target","value","handleSubmit","preventDefault","Error","hasRepo","find","repo","name","response","get","data","full_name","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","_","prevState","setItem","stringify","render","map","repository","encodeURIComponent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n/* react-icons/nome do pacote de icones que queremos utilizar\n{ nome do icone -ctrl + espaço } */\nimport { FaGithubAlt, FaPlus, FaSpinner } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\n\nimport api from '../../services/api';\n\nimport Container from '../../components/Container';\nimport { Form, SubmitButton, List } from './styles';\n\nclass Main extends Component {\n  state = {\n    newRepo: '',\n    repositories: [],\n    loading: false,\n    error: null,\n  };\n\n  // Carrega os dados do localStorage\n  componentDidMount() {\n    const repositories = localStorage.getItem('repositories');\n\n    if (repositories) {\n      /* Convertemos novamente a estrutura que estava armazenada em JSON para um\n      valor em objeto do javascript  */\n      this.setState({ repositories: JSON.parse(repositories) });\n    }\n  }\n\n  // Salvar os dados no localStorage\n  /* Temos acesso as props e state desse componente, como não temos nenhuma\n  propriedade no componente colocamos _ , e comparamos se o estado de repositórios\n  mudou do meu estado atual de repositórios */\n  componentDidUpdate(_, prevState) {\n    const { repositories } = this.state;\n    if (prevState.repositories !== repositories) {\n      /* localStorage não aceita array apenas string */\n      localStorage.setItem('repositories', JSON.stringify(repositories));\n    }\n  }\n\n  handleInputChange = e => {\n    this.setState({ newRepo: e.target.value, error: null });\n  };\n\n  handleSubmit = async e => {\n    e.preventDefault();\n\n    this.setState({ loading: true, error: false });\n\n    const { newRepo, repositories } = this.state;\n\n    try {\n      if (newRepo === '') {\n        throw new Error('Você precisa indicar um repositório');\n      }\n\n      const hasRepo = repositories.find(repo => repo.name === newRepo);\n      if (hasRepo) {\n        throw new Error('Repositório duplicado');\n      }\n\n      // Fazer chamadas a api utilizando a bibloteca axios como ela vai demorar um pouco\n      // utilizamos a async await, metodo get para buscar uma informação\n      const response = await api.get(`/repos/${newRepo}`);\n\n      // Não vamos utilizar todas as informações que vem da api do github, então\n      // fazemos a desestruturação para pegar apenas os dados necessários\n      const data = {\n        name: response.data.full_name,\n      };\n\n      // Agora pegamos esta informação que veio da api e colocamos dentro do array\n      // repositories, como temos que montar novamente o array pegamos todas as informações\n      // que já tem dentro desse array com ...repositories, e acrescentamos o registro em data\n      this.setState({\n        repositories: [...repositories, data],\n        newRepo: '',\n      });\n    } catch (error) {\n      this.setState({ error: true });\n    } finally {\n      this.setState({ loading: false });\n    }\n  };\n\n  render() {\n    const { newRepo, repositories, loading, error } = this.state;\n\n    return (\n      <Container>\n        <h1>\n          <FaGithubAlt />\n          Repositórios\n        </h1>\n\n        <Form onSubmit={this.handleSubmit} error={error}>\n          <input\n            type=\"text\"\n            placeholder=\"Adicionar repositórios\"\n            value={newRepo}\n            onChange={this.handleInputChange}\n          />\n\n          <SubmitButton loading={loading}>\n            {/* conditional render react - ou seja Renderização condicional\n            Se a propriedade loading estiver como true ele mostra o icone de\n            spinner, se for false ele mostra o icone de mais para adicionar um\n            repositorio */}\n\n            {loading ? (\n              <FaSpinner color=\"#FFF\" size={14} />\n            ) : (\n              <FaPlus color=\"#FFF\" size={14} />\n            )}\n          </SubmitButton>\n        </Form>\n\n        <List>\n          {repositories.map(repository => (\n            <li key={repository.name}>\n              <span> {repository.name} </span>\n\n              {/* a variavel repository.name ela guarda a informação do\n              dono do repositório/nome do repositório, e a barra dentro de uma url ela\n              significa como se fosse um endereço a mais uma pasta a mais, então precisamos\n              realizar um encode neste texto, para que esta barra não seja contada como uma\n              barra e sim um caractere especial\n              encodeURIComponent é uma função do javascript que vai realizar o encode */}\n\n              <Link to={`/repository/${encodeURIComponent(repository.name)}`}>\n                Detalhes\n              </Link>\n            </li>\n          ))}\n        </List>\n      </Container>\n    );\n  }\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}