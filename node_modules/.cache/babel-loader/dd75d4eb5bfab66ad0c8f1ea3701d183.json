{"ast":null,"code":"/* keyframe para fazer animações */\nimport styled, { keyframes, css } from 'styled-components';\nexport const Form = styled.form`\n  margin-top: 30px;\n  display: flex;\n  flex-direction: row;\n\n  input {\n    flex: 1;\n    border: 1px solid ${props => props.error ? '#ff6b6b' : '#eee'};\n    padding: 10px 15px;\n    border-radius: 4px;\n    font-size: 16px;\n  }\n`;\n/* Fazer animação no spinner para ele rodar.\npodemos utilizar como se fosse uma animação no css, e dentro do css precisamos informar\nde que estado meu item vai para qual estado */\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to{\n    transform: rotate(360deg);\n  }\n`;\n/* Estamos adicionando um atributo a esta botão dizendo o type dele é submit\nE através de props estamos acessando os atributos deste componente */\n\n/* Vou setar uma propriedade disabled neste componente baseado no atributo loading */\n\nexport const SubmitButton = styled.button.attrs(props => ({\n  type: 'submit',\n  disabled: props.loading\n}))`\n  background: #7159c1;\n  border: 1;\n  padding: 0 15px;\n  margin-left: 10px;\n  border-radius: 4px;\n\n  /* Somando essas propriedades vai garantir que todo conteudo do botão seja centralizado */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  /* & serve para se referir a este elemento ao botão, aqui caso a propriedade disabled\n  receber o valor true, e este valor vem da propriedade loading, ele aplica essas\n  estilizações */\n  &[disabled] {\n    cursor: not-allowed;\n    opacity: 0.6;\n  }\n\n  /* Se a propriedade loading for true, aqui poderiamos até utilizao o operador ternario\n  mas como não teremos uma condição else que não bata, então utilizamos o && e as estilizações\n  só serão aplicadas se a propriedade loading estiver como true*/\n\n  /* Chamamos o css que importamos do styled components e coloco o que eu quero aplicar de\n  css para este meu elemento, e aplico a estilização a cada 2 segundos uma animação\n  totalmente linear e infinita */\n\n  ${props => props.loading && css`\n      svg {\n        animation: ${rotate} 2s linear infinite;\n      }\n    `}\n`;\nexport const List = styled.ul`\n  /* Tirar os bolinhas da lista */\n  list-style: none;\n  margin-top: 30px;\n\n  /* E para cada tag <li> */\n  li {\n    padding: 15px 0; /* Espaçamento em cima e em baixo de 15px */\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between; /* Ele vai jogar o titulo para a esquerda e detalhes direita */\n    align-items: center;\n\n    /* Adcionar uma bordar conza entre cada <li> da minha lista */\n    /* Me referencio pelo elemento atual + li ou seja estou pegando todos os li\n    e pegando qualquer li que seja seguido pelo um li anterior, ou seja ele não vai\n    aplicar essa estilização no primeiro li, apenas nos demais */\n    & + li {\n      border-top: 1px solid #eee;\n    }\n\n    a {\n      color: #7159c1;\n      text-decoration: none; /* Para tirar o anderline do link */\n    }\n  }\n`;","map":{"version":3,"sources":["/home/gisele/Documentos/curso/curso_rocketseat/primeiroprojetoreact/src/pages/Main/styles.js"],"names":["styled","keyframes","css","Form","form","props","error","rotate","SubmitButton","button","attrs","type","disabled","loading","List","ul"],"mappings":"AAAA;AAEA,OAAOA,MAAP,IAAiBC,SAAjB,EAA4BC,GAA5B,QAAuC,mBAAvC;AAEA,OAAO,MAAMC,IAAI,GAAGH,MAAM,CAACI,IAAK;;;;;;;wBAORC,KAAK,IAAKA,KAAK,CAACC,KAAN,GAAc,SAAd,GAA0B,MAAQ;;;;;CAP7D;AAcP;;;;AAGA,MAAMC,MAAM,GAAGN,SAAU;;;;;;;;CAAzB;AAUA;;;AAGA;;AACA,OAAO,MAAMO,YAAY,GAAGR,MAAM,CAACS,MAAP,CAAcC,KAAd,CAAoBL,KAAK,KAAK;AACxDM,EAAAA,IAAI,EAAE,QADkD;AAExDC,EAAAA,QAAQ,EAAEP,KAAK,CAACQ;AAFwC,CAAL,CAAzB,CAGxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4BAR,KAAK,IACLA,KAAK,CAACQ,OAAN,IACAX,GAAI;;qBAEaK,MAAO;;KAEtB;CArCC;AAwCP,OAAO,MAAMO,IAAI,GAAGd,MAAM,CAACe,EAAG;;;;;;;;;;;;;;;;;;;;;;;;;;CAAvB","sourcesContent":["/* keyframe para fazer animações */\n\nimport styled, { keyframes, css } from 'styled-components';\n\nexport const Form = styled.form`\n  margin-top: 30px;\n  display: flex;\n  flex-direction: row;\n\n  input {\n    flex: 1;\n    border: 1px solid ${props => (props.error ? '#ff6b6b' : '#eee')};\n    padding: 10px 15px;\n    border-radius: 4px;\n    font-size: 16px;\n  }\n`;\n\n/* Fazer animação no spinner para ele rodar.\npodemos utilizar como se fosse uma animação no css, e dentro do css precisamos informar\nde que estado meu item vai para qual estado */\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to{\n    transform: rotate(360deg);\n  }\n`;\n\n/* Estamos adicionando um atributo a esta botão dizendo o type dele é submit\nE através de props estamos acessando os atributos deste componente */\n\n/* Vou setar uma propriedade disabled neste componente baseado no atributo loading */\nexport const SubmitButton = styled.button.attrs(props => ({\n  type: 'submit',\n  disabled: props.loading,\n}))`\n  background: #7159c1;\n  border: 1;\n  padding: 0 15px;\n  margin-left: 10px;\n  border-radius: 4px;\n\n  /* Somando essas propriedades vai garantir que todo conteudo do botão seja centralizado */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  /* & serve para se referir a este elemento ao botão, aqui caso a propriedade disabled\n  receber o valor true, e este valor vem da propriedade loading, ele aplica essas\n  estilizações */\n  &[disabled] {\n    cursor: not-allowed;\n    opacity: 0.6;\n  }\n\n  /* Se a propriedade loading for true, aqui poderiamos até utilizao o operador ternario\n  mas como não teremos uma condição else que não bata, então utilizamos o && e as estilizações\n  só serão aplicadas se a propriedade loading estiver como true*/\n\n  /* Chamamos o css que importamos do styled components e coloco o que eu quero aplicar de\n  css para este meu elemento, e aplico a estilização a cada 2 segundos uma animação\n  totalmente linear e infinita */\n\n  ${props =>\n    props.loading &&\n    css`\n      svg {\n        animation: ${rotate} 2s linear infinite;\n      }\n    `}\n`;\n\nexport const List = styled.ul`\n  /* Tirar os bolinhas da lista */\n  list-style: none;\n  margin-top: 30px;\n\n  /* E para cada tag <li> */\n  li {\n    padding: 15px 0; /* Espaçamento em cima e em baixo de 15px */\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between; /* Ele vai jogar o titulo para a esquerda e detalhes direita */\n    align-items: center;\n\n    /* Adcionar uma bordar conza entre cada <li> da minha lista */\n    /* Me referencio pelo elemento atual + li ou seja estou pegando todos os li\n    e pegando qualquer li que seja seguido pelo um li anterior, ou seja ele não vai\n    aplicar essa estilização no primeiro li, apenas nos demais */\n    & + li {\n      border-top: 1px solid #eee;\n    }\n\n    a {\n      color: #7159c1;\n      text-decoration: none; /* Para tirar o anderline do link */\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}